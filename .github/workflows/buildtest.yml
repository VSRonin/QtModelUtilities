name: Main Platforms
on: 
  push:
    branches:
      - master
      - dev
    paths-ignore:
      - '.travis.yml'
      - 'docs/**'
      - '**.markdown'
      - '**.md'
      - 'LICENSE'
  pull_request:
    branches:
      - master
      - dev
    paths-ignore:
      - '.travis.yml'
      - 'docs/**'
      - '**.markdown'
      - '**.md'
      - 'LICENSE'
jobs:
    build:
        name: Build and Test ${{ matrix.platforms.friendly_name }} Qt${{ matrix.qt_ver }} dll${{ matrix.shared_lib }} NoGui${{ matrix.no_gui }} NoWidgets${{ matrix.no_widgets }} ManyRoles${{ matrix.many_roles }}
        runs-on: ${{ matrix.platforms.os }}
        strategy:
          fail-fast: false
          matrix:
              qt_ver: [5.15.2,6.0.4]
              shared_lib: [ON,OFF]
              no_widgets: [OFF,ON]
              no_gui: [OFF,ON]
              many_roles: [OFF,ON]
              platforms:
                - { os: windows-latest, generator: "NMake Makefiles", friendly_name: MSVC }
                - { os: windows-latest, generator: "MinGW Makefiles", friendly_name: MinGW }
                - { os: ubuntu-latest, generator: "Unix Makefiles", friendly_name: Ubuntu }
                - { os: macos-latest, generator: "Unix Makefiles", friendly_name: MacOS }
              exclude:
                - no_gui: ON
                  no_widgets: OFF
        steps:
          - name: Install Qt
            if: ${{ matrix.platforms.friendly_name != 'MinGW' }}
            uses: jurplel/install-qt-action@v2
            with:
              version: ${{ matrix.qt_ver }}
          - name: Install Qt MinGW
            if: ${{ matrix.platforms.friendly_name == 'MinGW' }}
            uses: jurplel/install-qt-action@v2
            with:
              version: ${{ matrix.qt_ver }}
              arch: win64_mingw81
          - name: Git Checkout
            uses: actions/checkout@v2
            with:
              fetch-depth: 0
          - name: Create Build Directory
            shell: pwsh
            run: |
              mkdir build
              cd build
              mkdir debug
              mkdir release
          - name: Set up MSVC environment
            if: ${{ matrix.platforms.friendly_name == 'MSVC' }}
            uses: ilammy/msvc-dev-cmd@v1
          - name: Install Linux Dependencies
            if: ${{ runner.os == 'Linux' }}
            run: |
              sudo apt-get update -y
              sudo apt-get install libxcb-icccm4 libxcb-xkb1 libxcb-icccm4 libxcb-image0 libxcb-render-util0 libxcb-randr0 libxcb-keysyms1 libxcb-xinerama0 libxcb-xinput-dev
              export PATH=$PATH:$PWD/build/installed/lib
              export PATH=$PATH:$PWD/build/installed/bin
          - name: ${{ matrix.platforms.friendly_name }} Qt${{ matrix.qt_ver }} Static:${{ matrix.shared_lib }} No Gui:${{ matrix.no_gui }} No Widgets:${{ matrix.no_widgets }} Many Roles:${{ matrix.many_roles }}
            shell: pwsh
            run: |
              cd build/debug
              cmake -G"${{ matrix.platforms.generator }}" -DCMAKE_BUILD_TYPE=DEBUG -DCMAKE_DEBUG_POSTFIX=d -DBUILD_TESTING=ON -DTEST_OUTPUT_XML=ON -DBUILD_EXAMPLES=ON -DBUILD_SHARED_LIBS=${{ matrix.shared_lib }} -DCMAKE_INSTALL_PREFIX="../installed" -DNO_WIDGETS=${{ matrix.no_widgets }} -DNO_GUI=${{ matrix.no_gui }} -DOPTIMISE_FOR_MANY_ROLES=${{ matrix.many_roles }} ../../
              cmake --build .
              cmake --build . --target install
              cd ../release
              cmake -G"${{ matrix.platforms.generator }}" -DCMAKE_BUILD_TYPE=RELEASE -DBUILD_TESTING=ON -DTEST_OUTPUT_XML=ON -DBUILD_EXAMPLES=ON -DBUILD_SHARED_LIBS=${{ matrix.shared_lib }} -DCMAKE_INSTALL_PREFIX="../installed" -DNO_WIDGETS=${{ matrix.no_widgets }} -DNO_GUI=${{ matrix.no_gui }} -DOPTIMISE_FOR_MANY_ROLES=${{ matrix.many_roles }} ../../
              cmake --build .
              cmake --build . --target install
          - name: Linux Debug Test
            if: ${{ runner.os == 'Linux' }}
            id: runlinuxdebugtests
            continue-on-error: true
            uses: GabrielBB/xvfb-action@v1
            with:
              working-directory: ./build/debug
              run: cmake --build . --target test
          - name: Linux Release Test
            if: ${{ runner.os == 'Linux' }}
            id: runlinuxreleasetests
            uses: GabrielBB/xvfb-action@v1
            with:
              working-directory: ./build/release
              run: cmake --build . --target test
          - name: Test
            if: ${{ runner.os != 'Linux' }}
            id: runtests
            shell: pwsh
            run: |
              cd build
              $OldPath = [Environment]::GetEnvironmentVariable("PATH")
              [Environment]::SetEnvironmentVariable("PATH","$pwd/installed/lib;$pwd/installed/bin;$OldPath")
              cd debug
              cmake --build . --target test
              cd ../release
              cmake --build . --target test
          - name: HtmlModelSerialiser output validation
            run: |
              pip install html5validator
              html5validator --root build/TestResults/
          - name: Prepare Test Report
            if: ${{ always() && (steps.runtests.outcome == 'failure' || steps.runlinuxdebugtests.outcome == 'failure' || steps.runlinuxreleasetests.outcome == 'failure') }}
            uses: ./ci/processtestresults
            with:
                qt-tests: build/TestResults
                junit-output: build/TestResults/junitresult.xml
                html-output: build/TestResults/testsreport.html
          - name: Publish Test Report
            if: ${{ always() && (steps.runtests.outcome == 'failure' || steps.runlinuxdebugtests.outcome == 'failure' || steps.runlinuxreleasetests.outcome == 'failure') }}
            uses: actions/upload-artifact@v2
            with:
                name: ${{ matrix.platforms.friendly_name }}-Qt${{ matrix.qt_ver }}-Shared${{ matrix.shared_lib }}-NoGui${{ matrix.no_gui }}-NoWidgets${{ matrix.no_widgets }}-ManyRoles${{ matrix.many_roles }}
                path: |
                  build/TestResults/*.xml
                  build/TestResults/testsreport.html