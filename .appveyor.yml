version: '0.{build}'
branches:
  only:
    - master
    - dev
    - appveyor

image: Visual Studio 2017
environment:
  global:
    LatestQtVersion: 5.13
  matrix:
  - QT5: C:\Qt\%LatestQtVersion%\msvc2017
    COMPILER: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build
    platform: x86
    use_mingw: "false"
    use_gui: "true"
    use_widgets: "true"
    use_static: "true"
  - QT5: C:\Qt\%LatestQtVersion%\msvc2017
    COMPILER: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build
    platform: x86
    use_mingw: "false"
    use_gui: "true"
    use_widgets: "true"
    use_static: "false"
  - QT5: C:\Qt\%LatestQtVersion%\msvc2017
    COMPILER: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build
    platform: x86
    use_mingw: "false"
    use_gui: "true"
    use_widgets: "false"
    use_static: "true"
  - QT5: C:\Qt\%LatestQtVersion%\msvc2017
    COMPILER: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build
    platform: x86
    use_mingw: "false"
    use_gui: "true"
    use_widgets: "false"
    use_static: "false"
  - QT5: C:\Qt\%LatestQtVersion%\msvc2017
    COMPILER: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build
    platform: x86
    use_mingw: "false"
    use_gui: "false"
    use_widgets: "false"
    use_static: "true"
  - QT5: C:\Qt\%LatestQtVersion%\msvc2017
    COMPILER: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build
    platform: x86
    use_mingw: "false"
    use_gui: "false"
    use_widgets: "false"
    use_static: "false"
  - QT5: C:\Qt\%LatestQtVersion%\msvc2017_64
    COMPILER: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build
    platform: amd64
    use_mingw: "false"
    use_gui: "true"
    use_widgets: "true"
    use_static: "true"
  - QT5: C:\Qt\%LatestQtVersion%\msvc2017_64
    COMPILER: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build
    platform: amd64
    use_mingw: "false"
    use_gui: "true"
    use_widgets: "true"
    use_static: "false"
  - QT5: C:\Qt\%LatestQtVersion%\msvc2017_64
    COMPILER: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build
    platform: amd64
    use_mingw: "false"
    use_gui: "true"
    use_widgets: "false"
    use_static: "true"
  - QT5: C:\Qt\%LatestQtVersion%\msvc2017_64
    COMPILER: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build
    platform: amd64
    use_mingw: "false"
    use_gui: "true"
    use_widgets: "false"
    use_static: "false"
  - QT5: C:\Qt\%LatestQtVersion%\msvc2017_64
    COMPILER: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build
    platform: amd64
    use_mingw: "false"
    use_gui: "false"
    use_widgets: "false"
    use_static: "true"
  - QT5: C:\Qt\%LatestQtVersion%\msvc2017_64
    COMPILER: C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build
    platform: amd64
    use_mingw: "false"
    use_gui: "false"
    use_widgets: "false"
    use_static: "false"
  - QT5: C:\Qt\%LatestQtVersion%\mingw73_32
    COMPILER: C:\Qt\Tools\mingw730_32
    platform: x86
    use_mingw: "true"
    use_gui: "true"
    use_widgets: "true"
    use_static: "true"
  - QT5: C:\Qt\%LatestQtVersion%\mingw73_32
    COMPILER: C:\Qt\Tools\mingw730_32
    platform: x86
    use_mingw: "true"
    use_gui: "true"
    use_widgets: "true"
    use_static: "false"
  - QT5: C:\Qt\%LatestQtVersion%\mingw73_32
    COMPILER: C:\Qt\Tools\mingw730_32
    platform: x86
    use_mingw: "true"
    use_gui: "true"
    use_widgets: "false"
    use_static: "true"
  - QT5: C:\Qt\%LatestQtVersion%\mingw73_32
    COMPILER: C:\Qt\Tools\mingw730_32
    platform: x86
    use_mingw: "true"
    use_gui: "true"
    use_widgets: "false"
    use_static: "false"
  - QT5: C:\Qt\%LatestQtVersion%\mingw73_32
    COMPILER: C:\Qt\Tools\mingw730_32
    platform: x86
    use_mingw: "true"
    use_gui: "false"
    use_widgets: "false"
    use_static: "true"
  - QT5: C:\Qt\%LatestQtVersion%\mingw73_32
    COMPILER: C:\Qt\Tools\mingw730_32
    platform: x86
    use_mingw: "true"
    use_gui: "false"
    use_widgets: "false"
    use_static: "false"

matrix:
  fast_finish: true

before_build:
- set SOURCEDIR=%cd%
- call "%QT5%\bin\qtenv2.bat"
- cd /D %SOURCEDIR%
- if not %use_mingw%==true call "%COMPILER%\vcvarsall.bat" %platform%
- if %use_static%==true (set USESTATIC=ON) else (set USESTATIC=OFF)
- if %use_gui%==true (set USEGUI=OFF) else (set USEGUI=ON)
- if %use_widgets%==true (set USEWIDGETS=OFF) else (set USEWIDGETS=ON)
- if %use_mingw%==true (set CMAKEGENERATOR="MinGW Makefiles") else (set CMAKEGENERATOR="NMake Makefiles")
- if %use_mingw%==true set PATH=%PATH:C:\Program Files\Git\usr\bin;=%

build_script:
- mkdir .\build 
- cd .\build
- git describe --tags
- set PATH=%cd%\x86\lib;%cd%\x64\lib;%cd%\x86\bin;%cd%\x64\bin;%PATH%
- cmake --version
- cmake -G %CMAKEGENERATOR% -DCMAKE_BUILD_TYPE=DEBUG -DBUILD_TESTING=ON -DTEST_OUTPUT_XML=ON -DBUILD_EXAMPLES=OFF -DCMAKE_DEBUG_POSTFIX=d -DBUILD_STATIC_LIBS=%USESTATIC% -DCMAKE_INSTALL_PREFIX="./installed" -DNO_WIDGETS=%USEWIDGETS% -DNO_GUI=%USEGUI% ../
- cmake --build .
- cmake --build . --target install
- cmake --build . --target test & set preventFail = 1
- cmake -G %CMAKEGENERATOR% -DCMAKE_BUILD_TYPE=RELEASE -DBUILD_TESTING=ON -DTEST_OUTPUT_XML=ON -DBUILD_EXAMPLES=ON -DBUILD_STATIC_LIBS=%USESTATIC% -DCMAKE_INSTALL_PREFIX="./installed" -DNO_WIDGETS=%USEWIDGETS% -DNO_GUI=%USEGUI% ../
- cmake --build .
- cmake --build . --target install
- cmake --build . --target test & set preventFail = 1

after_build:
- if %use_mingw%==true set PATH=C:\Program Files\Git\usr\bin;%PATH%
- if %use_mingw%==true (set archivename=mingw) else (set archivename=msvc2017)
- if %platform%==x86 (set archivename=%archivename%_x86) else (set archivename=%archivename%_x64)
- if %use_gui%==true if %use_widgets%==true if %use_static%==false cpack -G ZIP

test_script:
- cd TestResults
- ps: '$xmlOut = new-object System.Xml.XmlDocument;
    $xmlOut.AppendChild($xmlOut.CreateXmlDeclaration("1.0","UTF-8",$null));
    $rootXmlOut = $xmlOut.CreateElement("testsuites");
    $xmlOut.AppendChild($rootXmlOut);
    $totalPass = 0;
    $totalFail = 0;
    $totalError = 0;
    $totalSkip = 0;
    $totalTime = 0;
    $crashMessage = $null;
    Get-ChildItem ".\" -Filter "*_tstres.xml" | Foreach-Object {
        $XmlDocument = $null;
        $localPass = 0;
        $localFail = 0;
        $localError = 0;
        $localSkip = 0;
        $localTime = 0;
        $currentFilePath = $_.FullName;
        $testSuiteName = $_.BaseName.subString(0,$_.BaseName.Length - 7);
        if([bool]((Get-Content -Path $currentFilePath) -as [xml])){
            [xml]$XmlDocument = (Get-Content -Path $currentFilePath) -as [xml];
        }
        else{
            $localError = 1;
            $rawFilecontent = [IO.File]::ReadAllText($currentFilePath);
            if([string]::IsNullOrEmpty($rawFilecontent)){
                $crashMessage = "Output file is empty: " + $currentFilePath;
            }
            else{
                $crashMessage = $rawFilecontent;
                $rawFileMatch = [regex]::match($rawFilecontent,"(?s)(.+<\/TestCase>)(.*)");
                if($rawFileMatch.Success){
                    if([bool](($rawFileMatch.captures.groups[1].value) -as [xml])){
                        [xml]$XmlDocument = ($rawFileMatch.captures.groups[1].value) -as [xml];
                        $crashMessage = $rawFileMatch.captures.groups[2].value;
                    }
                }
            }
        }
        $testSuiteXmlOut = $rootXmlOut.AppendChild($xmlOut.CreateElement("testsuite"));
        if($XmlDocument -ne $null){
            $testClassName = $XmlDocument.TestCase.name;
            $testSuiteXmlOut.SetAttribute("name",$testSuiteName);
            $testSuitePropertiesXmlOut = $testSuiteXmlOut.AppendChild($xmlOut.CreateElement("properties"));
            $testSuitePropertiesPropertyXmlOut = $testSuitePropertiesXmlOut.AppendChild($xmlOut.CreateElement("property"));
            $testSuitePropertiesPropertyXmlOut.SetAttribute("name","QtVersion");
            $testSuitePropertiesPropertyXmlOut.SetAttribute("value",($XmlDocument.TestCase.Environment.QtVersion));
            $testSuitePropertiesPropertyXmlOut = $testSuitePropertiesXmlOut.AppendChild($xmlOut.CreateElement("property"));
            $testSuitePropertiesPropertyXmlOut.SetAttribute("name","QtBuild");
            $testSuitePropertiesPropertyXmlOut.SetAttribute("value",($XmlDocument.TestCase.Environment.QtBuild));
            $testSuitePropertiesPropertyXmlOut = $testSuitePropertiesXmlOut.AppendChild($xmlOut.CreateElement("property"));
            $testSuitePropertiesPropertyXmlOut.SetAttribute("name","QTestVersion");
            $testSuitePropertiesPropertyXmlOut.SetAttribute("value",($XmlDocument.TestCase.Environment.QTestVersion));
            foreach($testFunction in $XmlDocument.SelectNodes("//TestFunction")){
                $testFunctionName = $testFunction.name;
                $countIncidents = $testFunction.ChildNodes.Count;
                $testFunctionTime = [decimal]$testFunction.Duration.msecs;
                $localTime = $localTime +$testFunctionTime;
                foreach($incident in $testFunction.ChildNodes){
                    if($incident.Name -ne "Incident" -and $incident.Name -ne "Message"){
                        continue;
                    }
                    $incidentName = $testFunctionName;
                    if($incident.DataTag -ne $null){
                        $incidentName = $incidentName + " - " + $incident.DataTag.InnerText;
                    }
                    $incidentName = ($incidentName);
                    $testSuitetestcaseXmlOut = $testSuiteXmlOut.AppendChild($xmlOut.CreateElement("testcase"));
                    $testSuitetestcaseXmlOut.SetAttribute("name",$incidentName);
                    $testSuitetestcaseXmlOut.SetAttribute("classname",$testClassName);
                    $testSuitetestcaseXmlOut.SetAttribute("time",$testFunctionTime/(1000*$countIncidents));
                    if($incident.type -eq "skip"){
                        ++$localSkip;
                        $testSuitetestcaseSkipXmlOut = $testSuitetestcaseXmlOut.AppendChild($xmlOut.CreateElement("skipped"));
                        $testSuitetestcaseSkipXmlOut.SetAttribute("message","file: " + ($incident.file + "`nline: " + $incident.line + "`n" + $incident.Description.InnerText));
                    }
                    ElseIf ($incident.type -eq "fail"){
                        ++$localFail;
                        $testSuitetestcaseSkipXmlOut = $testSuitetestcaseXmlOut.AppendChild($xmlOut.CreateElement("failure"));
                        $testSuitetestcaseSkipXmlOut.SetAttribute("message",("file: " + $incident.file + "`nline: " + $incident.line + "`n" + $incident.Description.InnerText));
                    }
                    ElseIf ($incident.type -eq "qdebug" -or $incident.type -eq "qwarn" -or $incident.type -eq "system" -or $incident.type -eq "qfatal"){
                        $testSuitetestcaseCerrXmlOut = $testSuitetestcaseXmlOut.AppendChild($xmlOut.CreateElement("system-err"));
                        $testSuitetestcaseCerrXmlOut.AppendChild($xmlOut.CreateTextNode(($incident.Description.InnerText)));
                    }
                    else{
                        ++$localPass;
                    }
                };
            };
        }
        if($localError -eq 1){
            $testSuitetestcaseXmlOut = $testSuiteXmlOut.AppendChild($xmlOut.CreateElement("testcase"));
            $testSuitetestcaseXmlOut.SetAttribute("name","SystemError");
            $testSuitetestcaseXmlOut.SetAttribute("classname",$testClassName);
            $testSuitetestcaseErrorXmlOut = $testSuitetestcaseXmlOut.AppendChild($xmlOut.CreateElement("error"));
            $testSuitetestcaseErrorXmlOut.SetAttribute("message",($crashMessage));
        }
        $testSuiteXmlOut.SetAttribute("time",$localTime/1000);
        $testSuiteXmlOut.SetAttribute("skipped",$localSkip);
        $testSuiteXmlOut.SetAttribute("tests",$localSkip+$localFail+$localError+$localPass);
        $testSuiteXmlOut.SetAttribute("failures",$localFail);
        $testSuiteXmlOut.SetAttribute("errors",$localError);
        $totalTime = $totalTime + $localTime;
        $totalSkip = $totalSkip + $localSkip;
        $totalError = $totalError + $localError;
        $totalFail = $totalFail + $localFail;
        $totalPass = $totalPass + $localPass;
    };
    $rootXmlOut.SetAttribute("time",$totalTime/1000);
    $rootXmlOut.SetAttribute("failures",$totalFail);
    $rootXmlOut.SetAttribute("errors",$totalError);
    $rootXmlOut.SetAttribute("tests",$totalPass);
    $xmlOut.save($pwd.Path + "\testResults.xml");
    if($totalError+$totalFail -gt 0){
        throw;
    }'

artifacts:
- path: '.\build\*.zip'

on_finish:
- ps: if (Test-Path ".\testResults.xml") {(new-object net.webclient).UploadFile("https://ci.appveyor.com/api/testresults/junit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path .\testResults.xml));}
